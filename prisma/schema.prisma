// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, so we use strings with constraints
// UserRole: HOD, STAFF, ADMIN
// TestType: APTITUDE, TECHNICAL, CODING, INTERVIEW
// TestStatus: DRAFT, PUBLISHED, ARCHIVED
// PlacementStatus: APPLIED, SHORTLISTED, INTERVIEWED, SELECTED, REJECTED

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  students    Student[]
  tests       Test[]
  placements  Placement[]

  @@map("departments")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  role         String   // HOD, STAFF, ADMIN
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  createdTests Test[]
  auditLogs    AuditLog[]

  @@map("users")
}

model Student {
  id           String   @id @default(cuid())
  rollNumber   String   @unique
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  year         Int
  semester     Int
  cgpa         Float?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  departmentId    String
  department      Department       @relation(fields: [departmentId], references: [id])
  testSubmissions TestSubmission[]
  placements      Placement[]

  @@map("students")
}

model Test {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        String   // APTITUDE, TECHNICAL, CODING, INTERVIEW
  status      String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  duration    Int        // in minutes
  totalMarks  Int
  passingMarks Int
  instructions String?
  isActive    Boolean    @default(true)
  scheduledAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  createdById  String
  createdBy    User       @relation(fields: [createdById], references: [id])
  
  questions    Question[]
  submissions  TestSubmission[]

  @@map("tests")
}

model Question {
  id          String   @id @default(cuid())
  question    String
  options     String?  // JSON string for MCQ questions
  correctAnswer String
  marks       Int
  explanation String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  testId    String
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers   Answer[]

  @@map("questions")
}

model TestSubmission {
  id          String   @id @default(cuid())
  startedAt   DateTime @default(now())
  submittedAt DateTime?
  totalMarks  Int      @default(0)
  obtainedMarks Int    @default(0)
  percentage  Float    @default(0)
  isPassed    Boolean  @default(false)
  timeSpent   Int      @default(0) // in minutes
  
  // Relations
  testId    String
  test      Test     @relation(fields: [testId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  answers   Answer[]

  @@unique([testId, studentId])
  @@map("test_submissions")
}

model Answer {
  id        String   @id @default(cuid())
  answer    String
  isCorrect Boolean  @default(false)
  marks     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submissionId String
  submission   TestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  website     String?
  industry    String?
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  placements Placement[]

  @@map("companies")
}

model Placement {
  id          String          @id @default(cuid())
  position    String
  package     Float?          // in LPA
  status      String          // APPLIED, SHORTLISTED, INTERVIEWED, SELECTED, REJECTED
  appliedAt   DateTime        @default(now())
  interviewAt DateTime?
  resultAt    DateTime?
  notes       String?

  // Relations
  studentId    String
  student      Student   @relation(fields: [studentId], references: [id])
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("placements")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldData   String?  // JSON string
  newData   String?  // JSON string
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
